================================================================================
Macro invocation - no arguments
================================================================================

a!();
b![];
c!{};
d::e!();
f::g::h!{};

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents)))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents)))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents)))
  (expression_statement
    (macro_invocation
      (scoped_identifier
        (identifier)
        (identifier))
      (macro_invocation_contents)))
  (expression_statement
    (macro_invocation
      (scoped_identifier
        (scoped_identifier
          (identifier)
          (identifier))
        (identifier))
      (macro_invocation_contents))))

================================================================================
Macro invocation - arbitrary tokens
================================================================================

a!(* a *);
a!(& a &);
a!(- a -);
a!(b + c + +);
a!('a'..='z');
a!('\u{0}'..='\u{2}');
a!('lifetime)
default!(a);
union!(a);
a!($);
a!($());
a!($ a $);
a!(${$([ a ])});
a!($a $a:ident $($a);*);

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (binary_expression
          (unary_expression
            (identifier))
          (MISSING identifier)))))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (binary_expression
          (reference_expression
            (identifier))
          (MISSING identifier)))))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (binary_expression
          (unary_expression
            (identifier))
          (MISSING identifier)))))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (binary_expression
          (identifier)
          (identifier))
        (ERROR))))
  (expression_statement
    (macro_invocation
      (identifier)
          (macro_invocation_contents
            (range_expression
              (char_literal)
              (char_literal)))))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (range_expression
          (char_literal)
          (char_literal)))))
  (macro_invocation
    (identifier)
    (macro_invocation_contents
      (ERROR
        (loop_label
          (identifier)))))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (identifier))))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (identifier))))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (ERROR))))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (ERROR)
        (unit_expression))))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (ERROR)
        (identifier)
        (ERROR))))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (ERROR)
        (block
          (ERROR)
          (parenthesized_expression
            (array_expression
              (identifier)))))))
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (binary_expression
          (call_expression
            (metavariable)
            (ERROR
              (metavariable))
            (arguments
              (metavariable)))
          (ERROR)
          (MISSING identifier))))))

================================================================================
Macro invocation with comments
================================================================================

ok! {
  // one
  /* two */
}

--------------------------------------------------------------------------------

(source_file
  (macro_invocation
    (identifier)
    (macro_invocation_contents
      (line_comment)
      (block_comment))))

================================================================================
Macro definition
================================================================================

macro_rules! say_hello {
    () => (
        println!("Hello!");
    )
}

macro_rules! four {
    () => {1 + 3};
}

macro_rules! foo {
    (x => $e:expr) => (println!("mode X: {}", $e));
    (y => $e:expr) => (println!("mode Y: {}", $e))
}

macro_rules! o_O {
    (
      $($x:expr; [ $( $y:expr ),* ]);*
    ) => {
      $($($x + $e),*),*
    }
}

macro_rules! zero_or_one {
    ($($e:expr),?) => {
        $($e),?
    };
}

--------------------------------------------------------------------------------

(source_file
  (macro_definition
    name: (identifier)
    (macro_rule
      left: (token_tree_pattern)
      right: (token_tree
        (identifier)
        (token_tree
          (string_literal)))))
  (macro_definition
    name: (identifier)
    (macro_rule
      left: (token_tree_pattern)
      right: (token_tree
        (integer_literal)
        (integer_literal))))
  (macro_definition
    name: (identifier)
    (macro_rule
      left: (token_tree_pattern
        (identifier)
        (token_binding_pattern
          name: (metavariable)
          type: (fragment_specifier)))
      right: (token_tree
        (identifier)
        (token_tree
          (string_literal)
          (metavariable))))
    (macro_rule
      left: (token_tree_pattern
        (identifier)
        (token_binding_pattern
          name: (metavariable)
          type: (fragment_specifier)))
      right: (token_tree
        (identifier)
        (token_tree
          (string_literal)
          (metavariable)))))
  (macro_definition
    name: (identifier)
    (macro_rule
      left: (token_tree_pattern
        (token_repetition_pattern
          (token_binding_pattern
            name: (metavariable)
            type: (fragment_specifier))
          (token_tree_pattern
            (token_repetition_pattern
              (token_binding_pattern
                name: (metavariable)
                type: (fragment_specifier))))))
      right: (token_tree
        (token_repetition
          (token_repetition
            (metavariable)
            (metavariable))))))
  (macro_definition
    name: (identifier)
    (macro_rule
      left: (token_tree_pattern
        (token_repetition_pattern
          (token_binding_pattern
            name: (metavariable)
            type: (fragment_specifier))))
      right: (token_tree
        (token_repetition
          (metavariable))))))

================================================================================
Macro invocation - expression "arguments"
================================================================================

println!(some.method(), a + b);
let x = vec![
  some_function(and, args),
  nested!(here.they(are)),
];

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (call_expression
          (field_expression
            (identifier)
            (field_identifier))
          (arguments))
        (binary_expression
          (identifier)
          (identifier)))))
  (let_declaration
    (identifier)
    (macro_invocation
      (identifier)
      (macro_invocation_contents
        (call_expression
          (identifier)
          (arguments
            (identifier)
            (identifier)))
        (macro_invocation
          (identifier)
          (macro_invocation_contents
            (call_expression
              (field_expression
                (identifier)
                (field_identifier))
              (arguments
                (identifier)))))))))
